var documenterSearchIndex = {"docs":
[{"location":"api/#КОМАНДНЫЙ-ИНТЕРФЕЙС-РОБОТА","page":"Командный интерфейс Робота","title":"КОМАНДНЫЙ ИНТЕРФЕЙС РОБОТА","text":"","category":"section"},{"location":"api/","page":"Командный интерфейс Робота","title":"Командный интерфейс Робота","text":"Робот может выполнять следующие, и только следуюющие, действия.","category":"page"},{"location":"api/","page":"Командный интерфейс Робота","title":"Командный интерфейс Робота","text":"Робот не может может проверить наличие перегородки между ним и сосоедней клеткой в любой из 4-х сторон горизонта (но убирать имеющуюся перегородку или устанавить новую он не может)\nРобот может делать шаг ровно на 1 клетку в кажом из 4-х направлений горизонта (наличие на его пути перегородки приведет к фатальной ошибке)\nРобот может установить маркер в клетке поля, в которой он находится в данный момент\nРобот может проверить наличие маркера в клетке, в которой находится (но убрать ранее поставленный маркер он не может)\nРобот может измерить температуру той клетке поля, в которой находится.","category":"page"},{"location":"api/","page":"Командный интерфейс Робота","title":"Командный интерфейс Робота","text":"Все перечисленные действия Робота реализуются с помощью специальных функций, составляющих его командный интерфейс, этих функций всего 8:","category":"page"},{"location":"api/","page":"Командный интерфейс Робота","title":"Командный интерфейс Робота","text":"    - move!(::Robot,::HorizonSide)::Nothing — перемещает робота ровно на 1 клетку в указанном направлении.\n    - isborder(::Robot,::HorizonSide)::Bool — проверяет наличие перегородки в указанном направлении.\n    - putmarker!(::Robot)::Nothing — ставит маркер в клетке с роботом.\n    - ismarker(::Robot)::Bool — проверяет наличие маркера в клетке с роботом.\n    - temperature(::Robot)::Int — возвращает температуру клетки с роботом.\n    - show(::Robot)::Nothing — открывает окно с обстановкой на поле (без возможности редактирования).\n    - show!(::Robot)::Nothing — открывает окно с обстановкой на поле и предоставляет возможность редактирования обстановки.\n    - save(::Robot, ::AbstractString) — сохраняет текущую обстановку в указанном файле.","category":"page"},{"location":"api/","page":"Командный интерфейс Робота","title":"Командный интерфейс Робота","text":"Особенностью этих функций является то, что у всех у них имеется аргумент типа Robot.","category":"page"},{"location":"api/","page":"Командный интерфейс Робота","title":"Командный интерфейс Робота","text":"Здесь всюду на позициях параметров каждой из функций указаны только типы соответствующих позиционных параметров. Указаны также типы значений, возвращаемых функциями (в конце заголовка каждой из функций после ::). Кроме типа Robot здесь имеются еще следующие типы:","category":"page"},{"location":"api/","page":"Командный интерфейс Робота","title":"Командный интерфейс Робота","text":"    - Nothing - тип представляющий всего одно-единственное значение - nothing, которое обозначает просто отсутствие значения (хотя формально это тоже значение)\n    - Bool - булевский (логический) тип, которому соответствуют 2 значения: true, false\n    - Int - тип 64-х битных целых чисел со знаком (это тоже самое, что Int64)\n    - HorizonSide - это перечисление (enum), определяющее 4 возможных значения сторон горизонта: Nord (север), West (запад), Sud (юг), Ost (восток) - это просто символы, обозначающие стороны горизонта\n    - AbstractString - это так называемый абстрактный тип, он является более общим чем  конкретный тип String (обычная строка); это означает, что аргументом соответствующей функции может быть, в частности, обычная строка типа String. ","category":"page"},{"location":"api/","page":"Командный интерфейс Робота","title":"Командный интерфейс Робота","text":"Как и любое перечисление (enum) HorizonSide имеет нумерацию перечисляемых в нем значений, так в нашем случае","category":"page"},{"location":"api/","page":"Командный интерфейс Робота","title":"Командный интерфейс Робота","text":"    HorizonSide(0) - это есть Nord\n    HorizonSide(1) - это есть West\n    HorizonSide(2) - это есть Sud\n    HorizonSide(3) - это есть Ost","category":"page"},{"location":"api/","page":"Командный интерфейс Робота","title":"Командный интерфейс Робота","text":"В приведенном списке команд Робота, составляющих его командный интерфейс, первые пять:","category":"page"},{"location":"api/","page":"Командный интерфейс Робота","title":"Командный интерфейс Робота","text":"    - move!(::Robot,::HorizonSide)::Nothing — перемещает робота ровно на 1 клетку в указанном направлении.\n    - isborder(::Robot,::HorizonSide)::Bool — проверяет наличие перегородки в указанном направлении.\n    - putmarker!(::Robot)::Nothing — ставит маркер в клетке с роботом.\n    - ismarker(::Robot)::Bool — проверяет наличие маркера в клетке с роботом.\n    - temperature(::Robot)::Int — возвращает температуру клетки с роботом.","category":"page"},{"location":"api/","page":"Командный интерфейс Робота","title":"Командный интерфейс Робота","text":"можно считать основными, а три оставшихся:","category":"page"},{"location":"api/","page":"Командный интерфейс Робота","title":"Командный интерфейс Робота","text":"    - show(::Robot)::Nothing — открывает окно с обстановкой на поле (без возможности редактирования).\n    - show!(::Robot)::Nothing — открывает окно с обстановкой на поле и предоставляет возможность редактирования обстановки.\n    - save(::Robot, ::AbstractString) — сохраняет текущую обстановку в указанном файле.","category":"page"},{"location":"api/","page":"Командный интерфейс Робота","title":"Командный интерфейс Робота","text":"могут быть охарактеризованы как вспомогательные, носящие сервисный характер.","category":"page"},{"location":"api/","page":"Командный интерфейс Робота","title":"Командный интерфейс Робота","text":"По любой из этих функций, а также по перечислению HorizonSide, можно получить исчерпывающую информацию, используя встроенную систему помощи (но только после того как будет выполено using HorizonSideRobots). Например:","category":"page"},{"location":"api/","page":"Командный интерфейс Робота","title":"Командный интерфейс Робота","text":"    julia> ?\n    help?> move!\n        move!(r::Robot, side::HorizonSide)::Nothing\n    -- Перемещает робота в соседнюю клетку в заданном направлении (если только на пути нет перегoродки, в противном случае - прерывание)","category":"page"},{"location":"language/#НАЧАЛЬНЫЕ-СВЕДЕНИЯ-О-ЯЗЫКЕ-ПРОГРАММИРОВАНИЯ-JULIA","page":"Начальные сведения о языке программирования Julia","title":"НАЧАЛЬНЫЕ СВЕДЕНИЯ О ЯЗЫКЕ ПРОГРАММИРОВАНИЯ JULIA","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Если вы знакомы с языком Python, то очень многое в языке Julia вам покажется знакомым. Но есть и существенные различия. ","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Например, в языке Julia отступы не имеют принципиального значения, такое как они имеют в языке Python, где отступы определяют структуру кода. И не надо ставить двоеточия в конце заголовков функций, циклов и т.д., как в Python. Вместо всего этого используется ключевое слово end, ограничивающее тело той или иной конструкции языка (см. ниже).","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Но тем не менее язык Julia во многом похож Python (но это только внешнее сходство). Благодаря этому сходству, например, часто удаётся выяснить имя и описание какой-либо вдруг понадобившейся стандартной функции Julia (если по каким-то причинам это не удалось сделать напрямую): велика вероятность того, что нужная функция называется и действует так же, как и в Python. При этом на сегодняшнй день информацию по языку Python на русском языке найти значительно проще.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/#ОГЛАВЛЕНИЕ","page":"Начальные сведения о языке программирования Julia","title":"ОГЛАВЛЕНИЕ","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"НАЧАЛЬНЫЕ СВЕДЕНИЯ О ЯЗЫКЕ ПРОГРАММИРОВАНИЯ JULIA\nФункции\nСпособы определения функций\nПозиционные параметры функций\nФормальные и фактические параметры функций\nПозиционные и именованные параметры\nВозвращаемые функцией значения\nМножественная диспетчеризация\nЦиклы\n\"Арифметический\" цикл\nЦикл с предусловием\nЗначение, возвращаемое оператором цикла\nОператоры изменения поряка выполнения цикла\nВложенные циклы\nВетвления\nЗначение, возвращаемое оператором ветвления\nПеременные, типы, выражения\nИтерируемые объекты\nМассивы\nДиапазоны\n\"Списковые включения\"\nГенераторы\nКортежи\nСтроки\nМножества и словари\nФункция collect\nОперация \"распаковки\" массива\nСистема встроенных и пользовательских типов\nВывод на экран\nРабота в REPL\nНемного о терминологии\nИнтроспекция\nДополнительные источники информации о языке Julia","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/#Функции","page":"Начальные сведения о языке программирования Julia","title":"Функции","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Функции - это основные \"кирпичики\" из которых состоят программы. ","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Сама программа, обычно, тоже является функцией, которую называют главной функцией.","category":"page"},{"location":"language/#**Способы-определения-функций**","page":"Начальные сведения о языке программирования Julia","title":"Способы определения функций","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Например, определение некоторой функции с одним агрументом (параметром) может выглядеть так","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"function f(x)\n    return x^2\nend","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"или так","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"function f(x)\n    x^2 # функция всегда возвращает значение последнего оператора в своем теле\nend","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"или даже так","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"f(x)=x^2","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Последний способ обычно используют для совсем коротких определений.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#**Позиционные-параметры-функций**","page":"Начальные сведения о языке программирования Julia","title":"Позиционные параметры функций","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Количество аргументов у функций может быть любым, в том числе параметров может не быть совсем.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Вот пример функции без параметров","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"one()=1","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"А вот пример функции с двумя параметрами","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"expr(x,y)=sin(x)+cos(y)","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"В приведенном примере параметры функции называются позиционными. Смысл этого названия разъясняется в следующем подразделе.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#**Формальные-и-фактические-параметры-функций**","page":"Начальные сведения о языке программирования Julia","title":"Формальные и фактические параметры функций","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Параметры, которые фигурируют в определениях функций принято называть формальными. По сути формальные параметры представляют собой просто символы, которые требуются, чтобы записать алгоритм вычисления функции. Имя любого формального параметра может быть заменено на другое, и от этого опредление функции не изменится.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"А вот при вызове функции на исполнение, на место формальных параметров должны быть подставлены фактические параметры, которые должны представлять некоторые конкретные значения.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"В рассмотренных примерах все аргументы функций являлись так называемыми позиционными параметрами. Это название происходит от того, что соответствие между формальными и фактическими параметрами устанавливается благодаря тому, что в списке параметров их позици фиксированы, т.е. каждому параметру определено строго определенное место в списке.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#**Позиционные-и-именованные-параметры**","page":"Начальные сведения о языке программирования Julia","title":"Позиционные и именованные параметры","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"В языке Julia (как и в языке Python) наряду с позиционными параметрами у функций могут быть также и именованные параметры или их еще называют ключевыми (key) параметрами.  Так называются параметры, за которыми прочно закреплены их имена. Например, известная нам функция Robot имеет именованный параметр animate. При вызове данной функции на исполнение этот параметр используется так","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Robot(animate=true)","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Функция может иметь как позиционные, так и именованные параметры, одновременно.  Такова, например, все таже функция Robot, у которой возможны два позиционных и один именованный параметры","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Robot(10, 15, animate=true)","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"В определении функций с обоими типами параметров в списке параметров сначала должны перечисляться все позиционные параметры, а затем, после \";\" - все именованные (которых тоже может быть несколько). При вызове же этих функций на исполнение, после позиционных именованные параметры могут располагаться в произвольном порядке (позиционные от именованных - могут разделяться просто \",\", но допустима также и \";\").","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Как именованные, так и позиционные параметры могут иметь значения по умолчанию. Например, ","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"julia> quadratic(x,a=1,b=0,c=0)=a*x^2+b*x+c\n\njulia> quadratic(2)\n    4","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(здесь все параметры у функции - позиционные).","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Стоит отметить, что в отношении использования именованных параметров синтаксис языка Julia отличается от синтаксиса Python.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#**Возвращаемые-функцией-значения**","page":"Начальные сведения о языке программирования Julia","title":"Возвращаемые функцией значения","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Если результатом выполнения функции является некоторое значение, то, как правило, функция должна это значение ВОЗВРАЩАТЬ. Для этого в теле функции может быть использован специальный оператор возврата - return. Этот оператор немедленно завершает выполнение функции и передает управление во вне, в точку ее вызова. В ту же точку возвращается (подставляется) возвращаемое функцией значение.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Если функция что-либо возвращает, то ее вызов может осуществляться из некоторого выражения, например из правой части оператора присваивания. ","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Если функция ничего не возвращает, а просто выполняет какие-то другие действия, то такиая функция, в некоторых языках программирования называется процедурой. Но в языке Julia такая терминология не используется. В языке Julia любая функция что-то возвращает, даже если она ничего возвращать не должна. В последнем случае возвращаемое значение будет nothing.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Выше рассматривались примеры функций, возвращающих ровно одно значение.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Если требуется, чтобы функция возвращала несколько значений, то эти возвращаемые значения должны составляться в кортеж (подробнее о кортежах см. ниже), например","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"fun(x,y)=(x+y, x-y) # (x+y, x-y) - это кортеж из двух значений","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Если при этом используется оператор return, то скобки ставить не обязательно:","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"function fun(x,y)\n    return x+y, x-y\nend","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"В любом случае в результате вызова ","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"a,b=fun(3,2)","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"получится a=5, b=1.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#**Множественная-диспетчеризация**","page":"Начальные сведения о языке программирования Julia","title":"Множественная диспетчеризация","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Важная отличительная особенность языка Julia от языка Python, заключается в том, что в определениях функций типы их аргументов можно анотировать, т.е. указывать, какими они должны быть.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Например, можно было бы дать еще следующие 2 определения","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"function f(x::Int)\n    return x^3\nend\n\nfunction f(x::Float64)\n    return x^4\nend","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"В результате мы получим еще два метода (варианта) функции f. Оба пределения функции f одновременно быдут существовать. Какое из них будет использовано - зависит от фактического типа аргумента функции (т.е. с аргументом какого типа будет ее вызов). Это называется множественной диспетчеризацией. ","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Зачем нужна множественная диспетчеризация, и как ей правильно пользоваться в языке Julia - это предмет отдельного разговора. Но заранее заметим, что эта тема имеет в Julia первостепеное значение. ","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#Циклы","page":"Начальные сведения о языке программирования Julia","title":"Циклы","text":"","category":"section"},{"location":"language/#**\"Арифметический\"-цикл**","page":"Начальные сведения о языке программирования Julia","title":"\"Арифметический\" цикл","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"for a in collection \n    println(a)\nend\n\nгде collecnion - это может быть диапазон, массив (Array), генератор, строка (String), множество (Set), словать (Dict) - см. ниже. \n\nНапример collection = [10,20,30,40,50] - это массив (в данном случае - вектор-столбец)\n\nfor i in eachindex(collection) # перебираются индексы элементов колллеции\n    println(i)\nend\n\nfor (i,a) in enumerate(collection) # перебираются пары индекс-значение элементов колллеции\n    println(i,\" -> \", a) \nend","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#**Цикл-с-предусловием**","page":"Начальные сведения о языке программирования Julia","title":"Цикл с предусловием","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"\nwhile условие_продолжения_цикла\n    ...\nend","category":"page"},{"location":"language/#**Значение,-возвращаемое-оператором-цикла**","page":"Начальные сведения о языке программирования Julia","title":"Значение, возвращаемое оператором цикла","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"В языке Julia любой оператор цикла имеет значение nothing (Nonthing), что обозначает \"отсутствие\" значения. Это значит, что это значение можно присвоить какой-либо переменной или вернуть из функции (речь, конечно, идет о некоторой формальности).","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#**Операторы-изменения-поряка-выполнения-цикла**","page":"Начальные сведения о языке программирования Julia","title":"Операторы изменения поряка выполнения цикла","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Иногда бывает необходимо прервать выполнение цикла при выполнении некоторого дополнительного условия - для этого существует оператор break. ","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Имеется также оператор continue, который в отличии от break не прерывеат выполнение цикла, а только переключает процесс на следующую итерацию, не дожидаясь выполнения  всех озаписанныз после него действий в теле цикла.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#**Вложенные-циклы**","page":"Начальные сведения о языке программирования Julia","title":"Вложенные циклы","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Любой цикл может содержать в своем теле другой цикл. Такие циклы называются вложенными.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"При необходимости \"выпрыгнуть\" за пределы внешнего цикла из какого-либо внутреннего (обычно - при выполнении некоторго условия) следует воспользоваться макросоми @goto и @label. Например,","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"for ...\n    ...\n    for ... \n        ...\n        if ...\n            @goto label_name\n        end\n        ...\n    end\n    ...\nend\n@label label_name","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"С помощью оператора break возможено \"выпрыгивание\" только за пределы одного текущего цикла. И если пользоваться этим оператором применительно к \"выпрыгиванию\" за пределы нескольких вложенных циклов, то понадобится целая цепочка таких \"выпрыгиваний\", а с помощью @goto - @label это можно будет сделать за одно действие.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#Ветвления","page":"Начальные сведения о языке программирования Julia","title":"Ветвления","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Ветвления выглядят в общем случае так","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"if условие\n    тело\nend\n\nif условие\n    тело_if\nelse\n    тело_else\nend\n\nif условие_1\n    тело_1\nelseif условие_2\n    тело_2\n...\nelseif условие_N # число провряемых усорвий может быть любым\n    тело_N\nelse # эта секция может и отсутствовать\n    тело_else\nend","category":"page"},{"location":"language/#**Значение,-возвращаемое-оператором-ветвления**","page":"Начальные сведения о языке программирования Julia","title":"Значение, возвращаемое оператором ветвления","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"В языке Julia начением оператора ветвления является значение последнего оператора в теле выполняемого блока. Например, если","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"a=if 2>0\n    10\nelse\n    -10\nend","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"то в результате переменная a получит значение 10.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#Переменные,-типы,-выражения","page":"Начальные сведения о языке программирования Julia","title":"Переменные, типы, выражения","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Также как и Python язык Julia является языком с динамической типизацией и с выводом типов. Первое означает, что переменная с заданным именем может изменить свой тип в процессе выполнения программы. А второе означает, что типы значений, которыми инициализируются переменные не обязательно явно указывать, компилятор Julia сумеет правильно определить (вывести) тип значения исходя из контекста (например, из способа записи числового значения). ","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Например","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"x=1   # - тип переменной будет Int64 (или просто - Int)\nx=1.0 # - тип переменной (с прежним именем) будет Float64\nx=1//2 # - тип переменной будет Ranional{Int64}","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"С числовыми значениями можно выполнять обычные арифметические опрерации и применять к ним стандартные математические функции. Пример математического выражения","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"1+2*(sin(x)-cos(y))/exp(x+y^3)","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Имеются логические значения true, false (тип Bool), к ним применимы стандартные логические операции && (\"и\"), || (\"или\"), ! (\"не\") (надо с осторожностью относится к побировым опереациям &, |, ~, и неиспользовать их вместо соответствующих логических операций - это может приводить к досадным недороазумениям)","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Операции сравнения: == (\"равно\"), === (\"тождественно равно\"), !=, !==, <, >, <=, >=. Возможны также двойные сравнения 1<2<3 - даст значение true. ","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#Итерируемые-объекты","page":"Начальные сведения о языке программирования Julia","title":"Итерируемые объекты","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Итерируемые объекты, это такие объекты, которые могут использоваться в цикле for:","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"    for элемент in некоторый_итерируемый_объект\n        ...\n    end","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Итерируемыми объектами, в частности, являются массивы, диапазоны, генераторы, кортежи, строки, множества, словари.","category":"page"},{"location":"language/#**Массивы**","page":"Начальные сведения о языке программирования Julia","title":"Массивы","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Индексация в массивах в языке Julia начинается с 1, так как это принято в математике (в отличие от языка Python, где индексация начинается с 0). Индексы записываются в квадратных скобках. Массивы в Julia являются динамическими, т.е. в процессе выполнения программы в них можно добавлять новые элементы, или удалять из них элементы (но к этой возможности надо относиться с осторожностью, т.к. это может явится причиной существенного замедления выполнения программы).   ","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Например,","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"a=[10,20,30,40] # - это 1-мерный массив (вектор-столбец)\n\na[1] - это 10\na[end] - это 40\n\nlength(a) - длина массива, равна 4\n\npush!(a,50) - добавляет в конец массива еще один элемент (50)\npop(a) - извлекает из конца массива элемент\n\na[2]=100 - присваивает новое значение 2-му элементу массива","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Здесь переменная a - это ссылка, т.е. если","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"b=a ","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"то b - это будет ссылка на тот же самый массив, так что изменение значения элемента в b будет означать и изменение в a. Например","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"b[2]=0","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"даст, что a[2] - это 0.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Чтбы получить копию массива, надо использовать функцию copy. Например,","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"с=copy(a)\n\nc[1]=1000","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"но a[1] - по-прежнему будет иметь значение 10.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"В Julia существует понятие \"среза\" массива. Срезы представляют соответствующие части существующего массива. Например, если имееттся массив a длиной 10, то его \"срез\", содержащий первую половину, можно получить так:","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"b=a[1:5]","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Важно, однако, отметить, что \"срезы\" в Julia (в отличие, например, от Python) копируются. Чтобы получить ссылку на \"срез\" следовало бы сделать так","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"b=@view a[1:5]","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Вообще работа с массивами в языке Julia реализована очень удобно и эффективно. В этом отношении (и не только в этом) Julia существенно превосходит язык Python.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"В Julia массивы могут быть самых разных типов. Они также могут быть одномерными, двумерными, многомерными, разряженными, динамическими, статическими. В принципе, и индексация возможна не только с 1, но и с любого другого произвольно заданного значения, включая 0 (но для этого пришлось бы импортировать специальный модуль).","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#**Диапазоны**","page":"Начальные сведения о языке программирования Julia","title":"Диапазоны","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Кроме массивов в языке Julia, как и в Python, есть еще диапазоны, которые более экономично, по сравнению с массивами, представляются в памяти. Но в Julia диапазоны записвываются иначе. ","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Например, 1:10, или 1:2:10 (2 - это шаг, он записывается в середине конструкции; по умолчанию шаг равен 1). ","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Дапазоны в Julia, в отличие о от Python, являются замкнутыми, т.е., например, число 10 в ходит в 1:10, и число 11 входит в 1:2:11 (но вот число 10 в 1:2:10, разумеется, - не входит). ","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Кроме того, начальное, конечное значения диапазона и щаг не обязательно целые числа, они могут быть и с плавающей точкой. Если, например,","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"a=10:10:100","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"то","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"a[1] # - это 10\na[2] # - это 20\n....\na[end] # - это 100 ","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Но присвоить новое значение элементу диапазона нельзя.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#**\"Списковые-включения\"**","page":"Начальные сведения о языке программирования Julia","title":"\"Списковые включения\"","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Массивы могут создаваться разными способами. Например, можно использовать так называемое списковое включение:","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"[i^2 for i in 1:10]","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"В данном случае получится массив квадратов первых 10 натуральных чисел. Эта конструкция вполне аналогична тому, что есть Python.","category":"page"},{"location":"language/#**Генераторы**","page":"Начальные сведения о языке программирования Julia","title":"Генераторы","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"А вот такая конструкция","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(i^2 for i in 1:10)","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"подобна предыдущей, но результатом ее выполнения является так называемый генератор (последовательности), а не массив. ","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Отличие в том, что все члены последовательности сразу не размещаются в памяти, а генерируются по мере надобности по очереди. ","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Например, такая конструкция могла бы съэкономить расход памяти в следующем цикле","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"for k in (i^2 for i in 1:1_000_000) ... end","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Использовать индексы, для обращения к отдельному элементу генерируемой последовательности нельзя.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#**Кортежи**","page":"Начальные сведения о языке программирования Julia","title":"Кортежи","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Генераторы не нужно путать с кортежами (Tuple), которые внешне выглядят похоже:","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(1,2,3,4) # - это кортеж","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Это кортеж - в отличие от массивов кортежи не изменяемы, т.е. изменить значение отдельного элемента кортежа нельзя. ","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Например,","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"a=(10,20,30,40) # - это кортеж\na[1]     # - это равно 10\na[1]=100 # - ошибка: кортеж изменить нельзя","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Кортежи могут использоваться в операторе присваивания, например:","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"a,b,c = 1,2,3 # это тоже самое, что и (a,b,c) = (1,2,3)","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"в результате получится, что a=1, b=2, c=3.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Картеж из одного элемента записвывается с помощью запятой в конце, например (2,) - это кортеж, а (2) - это просто 2.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Кортежи могут содержать элементы разных типов. Существуют также именованные кортежи (`NanedTuple).","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#**Строки**","page":"Начальные сведения о языке программирования Julia","title":"Строки","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Строки (String) - это, как и кортежи,  неизменяемые объекты. Например:","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"s=\"abcdefgh\"\ns[1] # - это есть символ ASCII 'a' (не строка)\ns[1]='b' # - ошибка: изменить строку не возможно","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Со строками возможны операции:","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"\"absd\"*\"efgh\" # - операция конкатенации (в Python аналогичная операция записывается с помощью символа \"+\")\n\n\"abc\"^3 # - операция дублирования, в данном случае - 3х кратного (в Python аналогичная операция записывается с помощью - \"*\")\n   \nn=3 \nprintln(\"number = $(n)\") # - вставляет в строку на место переменной n ее значение (это называется \"интерпляцией строк\") \n\nnumber = 3","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#**Множества-и-словари**","page":"Начальные сведения о языке программирования Julia","title":"Множества и словари","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"В языке Julia (как и в Python) помимо массивов существуют также такие стандартные контейнеры, как множества (Set) и словари (Dict).","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#**Функция-collect**","page":"Начальные сведения о языке программирования Julia","title":"Функция collect","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Любой итерируемый объект можно превратить в обычный одномерный массив с помощью функции сcollect:","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"массив = collect(некоторый_итерируемый_объект)","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#**Операция-\"распаковки\"-массива**","page":"Начальные сведения о языке программирования Julia","title":"Операция \"распаковки\" массива","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Если имеется какая-либо n-местная функция f (c n позиционными параметрами), и имеется некоторый массив x из n элементов, то передать элементы этого массива в функцию как отдельные параметры можно так f(x...).","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#Система-встроенных-и-пользовательских-типов","page":"Начальные сведения о языке программирования Julia","title":"Система встроенных и пользовательских типов","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Помимо многочисленных встроенных типов, среди которых есть как абстрактные, так и конкретные типы, и которые образуют некоторую древовидную иерархическую структуру, в языке Julia возможно создание (встраивание в указанное иерархическое дерево) пользовательских типов данных. Во главе иерархии типов стоит абстрактный тип Any. На концах древовидной структуры, и только на них, находятся все конкретные типы.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Пользовательские типы данных также могут быть как абстрыктными, так и конкретными. Абстрактные типы не содержат данных, они предназначены только для того, чтобы быть родительскими типами для для каких-либо других типов, абстрактных или конкретных.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Абстрактные типы определяются с помощью специальной синтаксической конструкции abstract type-end, и не содержат ничего, кроме указания имени нового типа и имени его родительского типа.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Конкретные же типы определяются с помощью конструкции struct-end, подобно тому, как это имеет место в C-подобных языках. Но, конечно, имеются и существенные отличия от этих языков. ","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Различные типы могут находиться между собой в отношении предок-потомок. Для выяснения того, какие типы являются дочерними, а какой - родительским, для какого-либо заданного типа имеются специальные встроенные функции subtypes, supertype, соответственно. ","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#Вывод-на-экран","page":"Начальные сведения о языке программирования Julia","title":"Вывод на экран","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Для вывода значений на экран имеются функции print, println. Например,","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"println(выражение_1, выражение_2,...,выражение_N)","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#Работа-в-REPL","page":"Начальные сведения о языке программирования Julia","title":"Работа в REPL","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"При работе в REPL иногда возникает необходимость отменить ранее сделанные определения. Напимер, если была создана переменная x:","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"julia> x=10000","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"то удалить её саму из области памяти REPL окажется невозможным. То есть, невозможно именно удалить имя, а не изменить значение. Можно лишь присвоить этой переменной значение nothing (тип этого значения — Nothing), что будет означать «отсутствие» значения.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"julia> x=nothing","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(значение-то на самом деле есть, просто оно — nothing, поэтому и поставлены кавычки).","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Если была определена функция, например,","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"julia> f(x::Int)=x^2","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"то удалить её из области REPL тоже не получится. Но её можно будет переопределить, сохранив типы аргументов, например:","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"julia> f(x::Int)=x^3","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Но вот если изменить при этом тип аргумента, например:","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"julia> f(x::Float64)=x^2","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"то окажется, что старое определение не исчезнет, а будет одновременно существовать два метода одной обобщённой (generic) функции (см. выше о множественной диспетчеризации).","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"В любом случае, чтобы совсем избавиться от сделанных ранее определений, необходима перезагрузка REPL. Она выполняется с помощью встроенной функции exit:","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"julia> exit()","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"В среде VS Code можно, однако, открыть ещё и новый экземпляр REPL, и продолжить работу в нём, сохранив прежний экземпляр REPL (между этими экземплярами можно будет спокойно переключаться, но они будут полностью изолироваными, никакой связи между ними не будет).","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#Немного-о-терминологии","page":"Начальные сведения о языке программирования Julia","title":"Немного о терминологии","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"В классических объектно-ориентированных языках программирования говорят о классах, имеющих методы. Так обстоит дело, например, в языке Python. В языке С++, однако, вместо понятия «метод» используется понятие «функция-член класса», а ещё там есть функции, «дружественные» классу.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"В таких языках класс — это специальная конструкция, позволяющая определять внутреннюю структуру данных, содержащуюся в каждом создаваемом с помощью констркутора класса в памяти комьютера объекте данного класса и те операции или действия, которые будут доступны программисту при программировании действий с объектами этого класса. Указанные операции или действия оформляются в виде методов класса.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"А вот в языке Julia вместо классов есть типы. У типов, как и у классов, есть конструкторы, но вместо методов у них есть функции. А методы в языке Julia, в свою очередь, есть только у функций (см. выше). При этом принято говорить, что тот или иной конкретный метод специализирует обобщённую (generic) функцию.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Обычно также в объектно-ориентированных языках используется точечная нотации для вызова какого-либо метода для данного объекта. Например, команда сделать шаг в направлении Nord в языке Python могла бы выглядеть так: r.move(Nord). Но в языке Julia точечная нотация для вызова функций, ассоциированных с данным типом, не используется. Объекты какого-либо типа могут являться лишь обычными аргументами своей функци","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#Интроспекция","page":"Начальные сведения о языке программирования Julia","title":"Интроспекция","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Для выяснения того, какого типа то или иное значение, имеется встроенная функция typeof. Также в REPL имеется удобная встроенная система помощи, с помощью которой можно получить много полезной информации о типах данных и функциях языка Julia.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"(<< К ОГЛАВЛЕНИЮ)","category":"page"},{"location":"language/#Дополнительные-источники-информации-о-языке-Julia","page":"Начальные сведения о языке программирования Julia","title":"Дополнительные источники информации о языке Julia","text":"","category":"section"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Более подробные сведения о языке Julia можно почерпнуть, например, ","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"здесь, а также здесь, или здесь. Однако информация о некоторых функциях, содержащаяся в двух последних источниках, может оказаться устаревшей, т.к. она относится к еще не стабильным версиям языка (до 1.0).","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Для более полного ознакомления с языком следует обращаться к официальной документации.","category":"page"},{"location":"language/","page":"Начальные сведения о языке программирования Julia","title":"Начальные сведения о языке программирования Julia","text":"Дополнительные ссылки на полезные источники информации о языке Julia собраны здесь.","category":"page"},{"location":"constructor/#КОНСТРУКТОР-ОБЪЕКТОВ-ТИПА-РОБОТ","page":"Конструктор объектов типа Robot","title":"КОНСТРУКТОР ОБЪЕКТОВ ТИПА РОБОТ","text":"","category":"section"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"Каждый объект типа Robot предназначен для имитации управления Роботом, способным перемещаться по клетчатому полю и выполнять еще некоторые действия в зависимости от обстановки на поле.","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"Обстановка на поле определяется ","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"наличием или отсутствием ограничивающей поле прямоугольной рамки (поле может быть ограниченным или неограниченным)\nналичием или отсутствием внутренних (межклеточных) перегородок\nналичием или отсутствием маркеров в клетках поля\nположением робота на поле. ","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"При этом, действия, которые может совершать Робот, определяются его командным интерфейсом","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"Внутренние данные, соответствующие обстановке на поле, формируется при вызове конструктора Robot. На эти данные должна быть получена ссылка, возвращаемая конструктором Robot при его вызове. Возможны следующие варианты вызова конструктора.","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"r=Robot()\nr=Robot(<число_строк_клеток_поля>,<число_столбцов_клеток_поля>)\nr=Robot(<имя_файла_с_oбстановкой>)\nr=Robot(...; animate=true)","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"В первом случае создаётся ограниченное рамкой поле 11x12 без внутренних перегородок и маркеров в клетках, с начальным положением робота в юго-восточном (нижнем левом) углу.","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"Во втором — поле будет иметь размеры, передваемые конструктору через соответствующие параметры.","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"В третьем — обстановка на поле будет соответствовать данным, загруженным из соответствующего файла; рекомендуется для таких файлов использовать расширение .sit (от слова situation).","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"Во всех трёх случаях создается объект типа Robotс данными начальной обстановки, ссылка на котрый записывается в переменную r  (имя переменной, разумеется, может быть и любым другим). При выполнении команд Робота эта внутренняя структура данных может изменяться. Но визуализации обстановки на поле, ни в началный момент, ни в последующие, при этом ещё не будет.","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"Для просмотра текущей обстановки следует пользоваться функцией show(r). В результате её выполнения будет открыто графическое окно с текущей обстановкой. При необходимости во время просмотра редактировать текущую обстановку с помощью мыши, вместо функции show следует использовать функциию show!.","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"При этом сохранить текущую обстановку в файле можно вызовом функции save(r, <имя_файла>).","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"Обстановку, сохраненную в файле можно просмотреть и не создавая объета типа Robot, вызвав для этого функцию show(<имя_файла_обстановкой>).","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"Однако визуализировать обстановку возможно и одновременно с созданием объекта типа Robot. Для этого в функции Robot кроме \"позиционных параметров\" предусмотрен также один \"именованный параметр\" - animate, который по умолчанию имеет значение false. Если же этому параметру дать значение true:","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"    r=Robot(...; animate=true)","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"то сразу же дополнительно будет открыто графическое окно с обстановкой на поле (которую, при необходимости, можно будет редактироваь мышью). И обсстановка, отображаемая в этом окне, будет автоматически изменятся при выполнении роботом соответствующих действий, точнее говоря, будет иметь место анимация перемещенй робота.","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"Вместо многоточия должны быть указаны фактические параметры (или они могут отсутствовать) в соответствии с первыми 3-мя вариантами использования функции Robot. ","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"Если используется режим анимации (animate = true), то функции show и show! использовать будет уже нельзя (приведёт к ошибке времени выполнения).","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"Режим анимации, однако, приводит к дополнительным временным задержкам, не желательным, может быть, при ыполненнии Роботом объёмных действий.","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"REPL Julia имеет встроенную систему помощи, с помощь которой можно получить справку о любой функции из импортированных в данный момент модулей (импортирование модулей осуществляется с помощщью оператора usung).","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"Для перехода в режим помощи следует набрать:","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"    julia> ?","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"В результате произойдет смена внешнего вида пригдашения REPL:","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"    help?>","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"Остается набрать имя интересующей функции и нажать Enter.","category":"page"},{"location":"constructor/","page":"Конструктор объектов типа Robot","title":"Конструктор объектов типа Robot","text":"В результате будет выведена исчерпывающая информация о назначении функции и способов ее использования (если, конечно, разработчик функции об этом заранее позаботился).","category":"page"},{"location":"links/#ДОПОЛНИТЕЛЬНЫЕ-ИСТОЧНИКИ-ИНФОРМАЦИИ-О-ЯЗЫКЕ-JULIA","page":"ДОПОЛНИТЕЛЬНЫЕ ИСТОЧНИКИ ИНФОРМАЦИИ О ЯЗЫКЕ JULIA","title":"ДОПОЛНИТЕЛЬНЫЕ ИСТОЧНИКИ ИНФОРМАЦИИ О ЯЗЫКЕ JULIA","text":"","category":"section"},{"location":"links/","page":"ДОПОЛНИТЕЛЬНЫЕ ИСТОЧНИКИ ИНФОРМАЦИИ О ЯЗЫКЕ JULIA","title":"ДОПОЛНИТЕЛЬНЫЕ ИСТОЧНИКИ ИНФОРМАЦИИ О ЯЗЫКЕ JULIA","text":"Для более систематического изучения основ языка Julia рекомендуется ресурс. Этот ресурс - англоязычный, но с использованием онлайн-переводчика им (как и фирменной документацией) вполне могут пользоваться даже не владеющие английским языком.","category":"page"},{"location":"links/","page":"ДОПОЛНИТЕЛЬНЫЕ ИСТОЧНИКИ ИНФОРМАЦИИ О ЯЗЫКЕ JULIA","title":"ДОПОЛНИТЕЛЬНЫЕ ИСТОЧНИКИ ИНФОРМАЦИИ О ЯЗЫКЕ JULIA","text":"Полезные статьи о Julia на русском языке можно найти на Хабре здесь, а также здесь","category":"page"},{"location":"links/","page":"ДОПОЛНИТЕЛЬНЫЕ ИСТОЧНИКИ ИНФОРМАЦИИ О ЯЗЫКЕ JULIA","title":"ДОПОЛНИТЕЛЬНЫЕ ИСТОЧНИКИ ИНФОРМАЦИИ О ЯЗЫКЕ JULIA","text":"Разумеется, существует фирменная документация вполне хорошего качества. ","category":"page"},{"location":"links/","page":"ДОПОЛНИТЕЛЬНЫЕ ИСТОЧНИКИ ИНФОРМАЦИИ О ЯЗЫКЕ JULIA","title":"ДОПОЛНИТЕЛЬНЫЕ ИСТОЧНИКИ ИНФОРМАЦИИ О ЯЗЫКЕ JULIA","text":"В продаже в России имеется переведённая на русский язык книга Малкольма Шеррингтона «Осваиваем язык Julia», но уже с обновлениями переизданная за рубежом (русского перевода нового издания, к сожалению, пока нет).","category":"page"},{"location":"links/","page":"ДОПОЛНИТЕЛЬНЫЕ ИСТОЧНИКИ ИНФОРМАЦИИ О ЯЗЫКЕ JULIA","title":"ДОПОЛНИТЕЛЬНЫЕ ИСТОЧНИКИ ИНФОРМАЦИИ О ЯЗЫКЕ JULIA","text":"На английском языку Julia посвящён уже целый ряд книг, как вводного характера, так и для более продвинутых специалистов.","category":"page"},{"location":"links/","page":"ДОПОЛНИТЕЛЬНЫЕ ИСТОЧНИКИ ИНФОРМАЦИИ О ЯЗЫКЕ JULIA","title":"ДОПОЛНИТЕЛЬНЫЕ ИСТОЧНИКИ ИНФОРМАЦИИ О ЯЗЫКЕ JULIA","text":"В интернете имеется также еще некоторое количество источников информации о Julia на русском языке:","category":"page"},{"location":"links/","page":"ДОПОЛНИТЕЛЬНЫЕ ИСТОЧНИКИ ИНФОРМАЦИИ О ЯЗЫКЕ JULIA","title":"ДОПОЛНИТЕЛЬНЫЕ ИСТОЧНИКИ ИНФОРМАЦИИ О ЯЗЫКЕ JULIA","text":"В. А. Антонюк. Язык Julia как инструмент исследователя\nА.В. Шиндин. Язык программирования математических вычислений Julia. Базовое руководство (незначительно устарело)\nКоротко о языке программирования Julia (незначительно устарело)\nJulia. Знакомство\nИгорь Ерёменко. Введение в язык программирования Julia на русском","category":"page"},{"location":"source_mark_kross/","page":"-","title":"-","text":"\"\"\"\n    mark_kross!(r::Robot)\n\n-- Решает задачу:\n\nДАНО: Робот находится в произвольной клетке ограниченного прямоугольного поля без внутренних перегородок и маркеров.\n\nРЕЗУЛЬТАТ: Робот — в исходном положении в центре прямого креста из маркеров, расставленных вплоть до внешней рамки.\n\"\"\"\nfunction mark_kross!(r::Robot) # - главная функция  \n    for side in (HorizonSide(i) for i=0:3) # - перебор всех возможных направлений\n        putmarkers!(r,side)\n        move_by_markers(r,inverse(side))\n    end\n    putmarker!(r)\nend\n\n# Всюду в заданном направлении ставит маркеры вплоть до перегородки, но в исходной клетке маркер не ставит\nputmarkers!(r::Robot,side::HorizonSide) = \nwhile isborder(r,side)==false \n    move!(r,side)\n    putmarker!(r)\nend\n\n# Перемещает робота в заданном направлении пока, пока он находится в клетке с маркером (в итоге робот окажется в клетке без маркера)\nmove_by_markers(r::Robot,side::HorizonSide) = \nwhile ismarker(r)==true \n    move!(r,side) \nend\n\n# Возвращает направление, противоположное заданному\ninverse(side::HorizonSide) = HorizonSide(mod(Int(side)+2, 4)) ","category":"page"},{"location":"#РОБОТ-НА-КЛЕТЧАТОМ-ПОЛЕ-СО-СТОРОНАМИ-ГОРИЗОНТА","page":"Заглавная","title":"РОБОТ НА КЛЕТЧАТОМ ПОЛЕ СО СТОРОНАМИ ГОРИЗОНТА","text":"","category":"section"},{"location":"","page":"Заглавная","title":"Заглавная","text":"(Image: Пример обстановки на поле)","category":"page"},{"location":"","page":"Заглавная","title":"Заглавная","text":"Данное ПО предназначено для поддержки начального курса программирования для студентов-первокурсников, целью которого является научить писать хорошо структурированный программный код, основываясь на технологии проектирования сверху вниз и включая использование идей обобщенного программирования. Оно помогает легко формулировать учебные задачи, сложность которых можно варьировать в достаточно широких пределах, и на которых можно научить/научиться всему заявленному, по крайней мере, в некотором приближении.","category":"page"},{"location":"","page":"Заглавная","title":"Заглавная","text":"Лежащие в основе методические идеи восходят к учебнику Кушниренко А.Г. и Лебедева Г.В. «Программирование для математиков», 1988.","category":"page"},{"location":"","page":"Заглавная","title":"Заглавная","text":"Курс базируется на языке программирования Julia. Этот язык очень выразительный, прост в изучении, обладает ясным и удобным синтаксисом, развитой системой типов, поддерживает основные на сегодняшний день парадигмы программирования, обладает хорошими интерактивными возможностями, динамически компилируемый, удачно спроектирован как для требовательных математических и технических вычислений, так и для общего программирования. Официальный сайт разработчиков языка Julia.","category":"page"},{"location":"","page":"Заглавная","title":"Заглавная","text":"","category":"page"},{"location":"#ОГЛАВЛЕНИЕ","page":"Заглавная","title":"ОГЛАВЛЕНИЕ","text":"","category":"section"},{"location":"","page":"Заглавная","title":"Заглавная","text":"Как установить Робота на своем компьютере\nКонструктор объектов типа Robot\nКомандный интерфейс Робота\nПример выполнения программы для Робота\nНачальные сведения о языке программирования Julia","category":"page"},{"location":"","page":"Заглавная","title":"Заглавная","text":"В Wiki-разделе имеется также Руководство по программированию, которое находится пока в состоянии развития.","category":"page"},{"location":"","page":"Заглавная","title":"Заглавная","text":"Для студентов 1-го курса потока КМБО института КИБЕРНЕТИКИ РТУ МИРЭА инструкция по организации учебного процесса на основе github","category":"page"},{"location":"setup/#КАК-УСТАНОВИТЬ-РОБОТА-НА-СВОЕМ-КОМПЬЮТЕРЕ","page":"Как установить Робота на своем компьютере","title":"КАК УСТАНОВИТЬ РОБОТА НА СВОЕМ КОМПЬЮТЕРЕ","text":"","category":"section"},{"location":"setup/","page":"Как установить Робота на своем компьютере","title":"Как установить Робота на своем компьютере","text":"Установить интерпретатор языка Python 3 и, дополнительно, - графическую библиотеку matplotlib.","category":"page"},{"location":"setup/","page":"Как установить Робота на своем компьютере","title":"Как установить Робота на своем компьютере","text":"Для этого проще всего воспользовваться дистрибутивом Anaconda (инструкция по установке, например, здесь), при установке которого и интерпретатор Python, и нужная библиотека будет установленны автоматически.","category":"page"},{"location":"setup/","page":"Как установить Робота на своем компьютере","title":"Как установить Робота на своем компьютере","text":"ПОСЛЕ ЭТОГО - установить Julia, запустив установщик с официального сайта (игструкция по установке имеется, например, здесь - она на английском, но, при необходимости, ее можно читать с online-переводчиком google). Следует запомнить полный путь к файлу julia.exe - это понадобится далее.\nЗатем установить интегрированную среду разработки (IDE) Visual Studio Code (на сегодняшний день это, пожалуй, наиболее удобный вариант для программирования на языке Julia, по крайней мере, для начинающих). Ддя этого следует запустить установщик с официального сайта VS Code.\nВ уже установленной VS Code установить расширение для языка Julia, инструкция имеется, например, здесь \nПосле этого необходимо сделать так, чтобы путь к папке с julia.exe стал известен VS Code - инструкция имеется здесь. ","category":"page"},{"location":"setup/","page":"Как установить Робота на своем компьютере","title":"Как установить Робота на своем компьютере","text":"Или можно еще сделать по-другому, а именно, прописать этот путь в системных переменных среды в настройках Windows. Для этого надо нажать кнопку \"Пуск\" ОС Windows, выбрать \"настойки\" (\"шестереночка\" там такая есть), в открывшемся поисковом поле ввести \"изменение системных переменных среды\" - появится пункт с таким же названием - его выбрать. В открывшемся при этом новом окне нажать кнопку \"Переменные среды...\". В открывшемся приэтом еще одном окне в разделе \"Переменные среды пользователя...\" в списке выбрать \"path\" и нажать кнопку \"Изменить...\". И в открывшемся еще одном окне нажать кнопку \"Создать\", и, наконец, в появившееся активное поле ввести полный путь к файлу julia.exe (но самой julia.exe в этом пути быть не должно - путь должен заканчиваться именем \"bin\"). После этого СОХРАНИТЬ результат настройки и ПЕРЕЗАПУСИТЬ компьютер.","category":"page"},{"location":"setup/","page":"Как установить Робота на своем компьютере","title":"Как установить Робота на своем компьютере","text":"После этого в VS Code, в окне терминала, в строке с \"приглашением\" ввести команду julia. В результате окно терминала должно смениться на окно REPL julia c \"пригдашением\" вида: julia>","category":"page"},{"location":"setup/","page":"Как установить Робота на своем компьютере","title":"Как установить Робота на своем компьютере","text":"(это может не получаться, если не был выполнен предыдущий пункт)","category":"page"},{"location":"setup/","page":"Как установить Робота на своем компьютере","title":"Как установить Робота на своем компьютере","text":"Набрать в REPL:\njulaia> ]\nВ реультате вид приглашения должен измениться:\npkg>\nНабрать:\npkg> add PyPlot\nНачнется процесс скачивания пакета PyPlot.jl из репозитория githab, который может занять некоторое время. По звершению этого процесса снова должно появиться приглашение\npkg>\nНабрать\npkg> add https://github.com/Vibof/HorizonSideRobots.jl\nи дождаться окончания процесса скачивания пакета HorizonSideRobots.jl\nПосле этого можно вернуться в нормальный режим REPL нажатием клавиши Backspace.\nПоследнее, что требуется еще сделать, это в настройках VS Code добиться того, чтобы при построении графиков - эти графики выводились бы не во встроенную в VS Code панель для графиков (ее пока не видно), а в отдельно открывающееся окно (это может быть важно!).","category":"page"},{"location":"setup/","page":"Как установить Робота на своем компьютере","title":"Как установить Робота на своем компьютере","text":"Для этого следует нажать \"шестеренку\" в конце панели с инструментами VS Code, в открывшемся списке выбрать \"settings\", и в открывшейся при этом вкладке в поисковом поле набрать \"plot\", появится пункт \"Julia: Use Plot Pane\", возле которого надо \"снять галочку\".","category":"page"},{"location":"setup/","page":"Как установить Робота на своем компьютере","title":"Как установить Робота на своем компьютере","text":"На этом все подготовительные и настроечные действия завершены, при нормальной работе больше их выполнять не придется.","category":"page"},{"location":"example/#ПРИМЕР-ВЫПОЛНЕНИЯ-ПРОГРАММЫ-ДЛЯ-РОБОТА","page":"Пример выполнения программы для Робота","title":"ПРИМЕР ВЫПОЛНЕНИЯ ПРОГРАММЫ ДЛЯ РОБОТА","text":"","category":"section"},{"location":"example/","page":"Пример выполнения программы для Робота","title":"Пример выполнения программы для Робота","text":"Пусть имеется функция, решающая с помощью Робота, следующую задачу.","category":"page"},{"location":"example/","page":"Пример выполнения программы для Робота","title":"Пример выполнения программы для Робота","text":"ДАНО: Робот находится в произвольной клетке ограниченного прямоугольного поля без внутренних перегородок и маркеров.","category":"page"},{"location":"example/","page":"Пример выполнения программы для Робота","title":"Пример выполнения программы для Робота","text":"РЕЗУЛЬТАТ: Робот — в исходном положении в центре прямого креста из маркеров, расставленных вплоть до внешней рамки.","category":"page"},{"location":"example/","page":"Пример выполнения программы для Робота","title":"Пример выполнения программы для Робота","text":"Результат работы этой программы должен выглядеть примерно так (Image: так).","category":"page"},{"location":"example/","page":"Пример выполнения программы для Робота","title":"Пример выполнения программы для Робота","text":"Пусть исходный код программы находится в текущей папке в файле \"mark_kross.jl\", в котором имеется главная функция mark_kross!(::Robot).","category":"page"},{"location":"example/","page":"Пример выполнения программы для Робота","title":"Пример выполнения программы для Робота","text":"Тогда, чтобы исполнить эту функцию, можно будет выполнить, например, следующие действия в REPL.","category":"page"},{"location":"example/","page":"Пример выполнения программы для Робота","title":"Пример выполнения программы для Робота","text":"    julia> using HorizonSideRobots\n    julia> r=Robot(animate=true)\n    julia> include(\"mark_kross.jl\")\n    julia> mark_kross!(r)","category":"page"},{"location":"example/","page":"Пример выполнения программы для Робота","title":"Пример выполнения программы для Робота","text":"А если, например, исходная обстановка на поле была бы представлена в некотором файле, а результат мы хотели бы получить в другом файле,  пусть это будут, для определенности, файлы \"infile.sit\" и \"outfile.sit\", соответственно, то мы могли бы действовать так. ","category":"page"},{"location":"example/","page":"Пример выполнения программы для Робота","title":"Пример выполнения программы для Робота","text":"Сначала нам понадобится написать еще одну функцию-обертку для функции mark_kross!. Эта наша функция-обертка даже будет иметь почти то же самое имя, нобез \"!\" на конце.","category":"page"},{"location":"example/","page":"Пример выполнения программы для Робота","title":"Пример выполнения программы для Робота","text":"    function mark_kross(infile_name::String, outfile_name::String)\n        r=Robot(infile_name)\n        mark_kross!(r)\n        save(r, outfile_name)\n    end","category":"page"},{"location":"example/","page":"Пример выполнения программы для Робота","title":"Пример выполнения программы для Робота","text":"Эту функцию, мы могли бы поместить, например, в тот же самый файл \"mark_krest.jl\". Но только при этом именно ее мы должны были бы считать главной функцией. Тогда для ее исполнения можно было бы в REPL выполнить, например, следующие действия.","category":"page"},{"location":"example/","page":"Пример выполнения программы для Робота","title":"Пример выполнения программы для Робота","text":"    julia> using HorizonSideRobots\n    julia> include(\"mark_kross.jl\")\n    julia> show(\"infile.sit\")\n    julia> mark_kross(\"infile.sit\",\"outfile.sit\")\n    julia> show(\"outfile.sit\")","category":"page"},{"location":"example/","page":"Пример выполнения программы для Робота","title":"Пример выполнения программы для Робота","text":"При этом, чтобы подготовить файл \"infile.sit\" мы предварительно могли бы воспользоваться функцией sitcreate","category":"page"},{"location":"example/","page":"Пример выполнения программы для Робота","title":"Пример выполнения программы для Робота","text":"    julia> sitcreate(11,12;newfile=\"infile.sit\")\n\nесли потом понадобилось бы еще скорректировать файл \"infile.sit\", то следовало бы воспользоваться функцией `sitedit`\n\n    julia> sitedit(\"infile.sit\")\n","category":"page"}]
}
